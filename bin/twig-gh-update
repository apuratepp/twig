#!/usr/bin/env ruby

# Updates each branch with the latest issue status on GitHub.
#
# Author: Ron DeVera <http://rondevera.com>

require File.join(File.dirname(__FILE__), '..', 'lib', 'twig')
require 'rubygems'
require 'json'
require 'net/https'
require 'uri'

twig = Twig.new
twig.read_config_file!
twig.read_cli_options!(ARGV)

Twig::GithubRepo.new do |gh_repo|
  $stdout.sync = true
  print 'Getting latest states for GitHub issues...'

  issues = {}
  issues_uri_base =
    "https://api.github.com/repos/#{gh_repo.username}/#{gh_repo.repository}/issues"
  issues_uris = [
    URI.parse("#{issues_uri_base}?state=open"),
    URI.parse("#{issues_uri_base}?state=closed")
  ]

  begin
    issues_uris.each do |issues_uri|
      http = Net::HTTP.new(issues_uri.host, issues_uri.port)
      http.use_ssl = true
      http.verify_mode = OpenSSL::SSL::VERIFY_PEER
      request = Net::HTTP::Get.new(issues_uri.path + '?' + issues_uri.query)
      response = http.request(request)

      if response.code.to_i == 200
        issues_data = JSON.parse(response.body)
        issues_data.each do |issue_data|
          issues[issue_data['number']] = issue_data
        end
      else
        abort "\nERROR: Couldn't get open issues from GitHub. " <<
          "(Response: #{response.code})"
      end
    end
  end

  twig.branches.each do |branch|
    issue_number = branch.get_property('issue').to_i
    next unless issue_number > 0

    issue = issues[issue_number]
    next unless issue

    state = issue['state']
    branch.set_property('status', state) unless state.nil? || state.empty?

    print '.'
  end

  puts
end
